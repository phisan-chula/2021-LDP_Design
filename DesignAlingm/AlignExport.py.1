#
# AlignExport.py : read LandXML alighment by 'xmltodict',convert to dataframe
#                   and export to GIS geopackage
#
import pandas as pd
import geopandas as gpd
import numpy as np
from pygeodesy.utm import Utm
from xmltodict import parse
from shapely.geometry import Point, LineString, Polygon, MultiPoint, MultiLineString
from shapely import ops
import fiona
gpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'

####################################################################
def ReadLandXML( XMLFILE ):
    with open( XMLFILE, 'r') as f:
        contents = parse( f.read() )  
    EPSG = contents['LandXML']['CoordinateSystem']['@epsgCode']  # '4326'/'32647'/'32648'
    #import pdb; pdb.set_trace()
    align0 = contents['LandXML']['Alignments']['Alignment'][0] # "Alignment_Down Track"
    align1 = contents['LandXML']['Alignments']['Alignment'][1] # "Alignment_Final"
    align2 = contents['LandXML']['Alignments']['Alignment'][2] # "Alignment_Down Track"
    for i, ali in enumerate( contents['LandXML']['Alignments']['Alignment'] ):
        print( f'Alignemnt#{i} @name : {ali["@name"]} ') 
    ##############################################
    HorAli = align1['CoordGeom']
    print( HorAli.keys() )
    Profi = align1['Profile']['ProfAlign']
    print( Profi.keys() )
    ##############################################
    dfTYPE = dict()
    for ali_type in ('Line','Curve','Spiral'):  # OrderedDict breaks semantics here!!!
        dfTYPE[ali_type] = pd.DataFrame( HorAli[ali_type] ) 
        print( f'Alightment type "{ali_type}" , count = {len(dfTYPE[ali_type])} .' )
        print( dfTYPE[ali_type] )

    dfPROFIL =pd.DataFrame( Profi['ParaCurve'] )
    def MakeProfil( row ):
        dist_m,msl =  np.fromstring( row['#text'], sep=" " )
        return pd.Series( [dist_m,msl] )
    dfPROFIL[['Dist_m','MSL']] = dfPROFIL.apply( MakeProfil, axis='columns' )
    #print( dfPROFIL )
    #import pdb; pdb.set_trace()
    return dfTYPE, dfPROFIL

####################################################################
def RestrucRoute( df_ali ):
    'Harmonize all "Line", "Curve", "Sprial" to single dataframe'
    rt_pnt = list(); rt_lin = list()
    CNT_LIN=0; CNT_CRV=0; CNT_SPI=0
    for ali_type in ('Line','Curve','Spiral'):
        for i,row in df_ali[ali_type].iterrows():
            stt = np.flip( np.fromstring( row.Start, sep=" "))
            end = np.flip( np.fromstring( row.End, sep=" "))
            len_flt = float(row['@length'])
            len_str = 'L={:.2f}m'.format( len_flt )
            if ali_type == 'Line':
                ALI_CNT = f'{ali_type}#{CNT_LIN}' ; CNT_LIN += 1
                mid    = (stt+end)/2 
                radi   = '' 
                radi_m = ''
                rot    = ''
            elif ali_type == 'Curve':
                ALI_CNT = f'{ali_type}#{CNT_CRV}' ; CNT_CRV += 1
                mid    = np.flip( np.fromstring( row.PI, sep=" ") ) 
                radi_m = float(row['@radius'])
                radi   = 'R={:.0f}m.'.format( radi_m )
                rot    = row['@rot']
                #import pdb; pdb.set_trace()
            elif ali_type == 'Spiral':
                ALI_CNT  = f'{ali_type}#{CNT_SPI}' ; CNT_SPI += 1
                mid      = np.flip( np.fromstring( row.PI, sep=" ") ) 
                rot      = row['@rot']
                if row['@radiusStart']=='INF': 
                    radi_m = float(row['@radiusEnd'])
                    radi   = 'Re={:.0f}m.'.format( radi_m )
                elif row['@radiusEnd']=='INF': 
                    radi_m = float(row['@radiusStart'])
                    radi   = 'Rs={:.0f}m.'.format( radi_m )
                else:
                    raise f'*** ERROR ***{i}#{row}' 
            else:
                raise "***ERROR *** curve not type 'Line','Curve','Spiral' "
            #if ali_type=='Curve': import pdb; pdb.set_trace()
            rt_pnt.append( [ ALI_CNT, ali_type, 'PC', Point(stt) ] )
            #rt_pnt.append( [ f'{ALI_CNT}:{rot}\n{len_str}\n{radi}\n', ali_type, 
            rt_pnt.append( [ ALI_CNT, ali_type, 'PI', Point(mid) ] )
            rt_pnt.append( [ ALI_CNT, ali_type, 'PT', Point(end) ] )
            rt_lin.append( [ ALI_CNT, ali_type, radi, radi_m, rot, 
                             len_flt, LineString( [stt,mid,end] ) ] )
    dfRoutPnt = pd.DataFrame( rt_pnt, columns=['Name','AliType', 'PntType', 'geometry'])
    dfRoutLS  = pd.DataFrame( rt_lin, columns=[ 'Name','AliType', 'Radi', 'Radi_m', 
                                               'RotDir', 'Length',  'geometry'])
    return dfRoutPnt, dfRoutLS

######################################################################
def CalcLinRefRoute( dfRoutPnt, dfRoutLS): 
    import pdb; pdb.set_trace() 
    LS_route = ops.linemerge( MultiLineString(  list(dfRoutLS.geometry) ) )
    snapped_ls = list()
    for i in range( len(LS_route.geoms)-1 ):    # welding contiguos points ...
        snapped_ls.append( ops.snap( LS_route.geoms[i], LS_route.geoms[i+1], 0.001 ) )
    snapped_ls.append( LS_route.geoms[-1] )
    LS_route = ops.linemerge( MultiLineString(  list(snapped_ls) ) )
    assert( LS_route.geom_type=='LineString')  # if linemerge successed--> LineString
    print( 'Route lenght (by vertex) : {:,.3f} meters'.format(LS_route.length) )
    def CalcDist( at_geom):
        return  LS_route.project( at_geom, normalized=False )
    dfRoutPnt['Dist'] = dfRoutPnt['geometry'].apply( CalcDist )
    dfRoutPnt.sort_values( by='Dist', inplace=True, ignore_index=True )
    dfRoutPnt = gpd.GeoDataFrame( dfRoutPnt, crs='EPSG:32647', 
                                 geometry=list(dfRoutPnt.geometry) )
    dfRoutLS = gpd.GeoDataFrame( dfRoutLS, crs='EPSG:32647', 
                                 geometry=list(dfRoutLS.geometry) )
    #import pdb; pdb.set_trace()
    return dfRoutPnt, dfRoutLS

def Az(LS):
    P0,P1 = LS.coords
    az = np.arctan2( P1[0]-P0[0] , P1[1]-P0[1] )
    return divmod( az,2*np.pi)[1]

def ResamplCurve( CurveData, INT=150 ):
    '''resampling each "simple circular" curve, designated radius is assumed
       to be TRUE distance and reduced to UTM dist by scale factor'''
    S = float(CurveData['@length'])
    R = float(CurveData['@radius'])
    CEN =  np.flip( np.fromstring( CurveData['Center'], sep=' ') )
    STT =  np.flip( np.fromstring( CurveData['Start'], sep=' ' ) )
    END =  np.flip( np.fromstring( CurveData['End'], sep=' ' ) )
    CTROID =  MultiPoint( [CEN,STT,END] ).centroid
    u = Utm( 47, 'N', CTROID.x, CTROID.y )   
    Rgd=u.toLatLon().scale*R                  # scaled R by PSF
    #import pdb; pdb.set_trace()
    nseg, head_tail = divmod( S , INT )
    pnts = np.linspace( head_tail/2., S-(head_tail/2), num=int(nseg),endpoint=True)
    if head_tail > 0.0:
        pnts = np.hstack( ( [0.0], pnts, [S] ) ) 
    RP_PC = LineString( [ CEN, STT] ) 
    SIGN = -1 if CurveData['@rot']=='ccw' else +1
    AZs = Az(RP_PC) + SIGN*pnts/R
    pnt_E = CEN[0]+ Rgd*np.sin(AZs)
    pnt_N = CEN[1]+ Rgd*np.cos(AZs)
    df = pd.DataFrame( zip( pnt_E,pnt_N ) , columns=['E','N'] )
    gdf = gpd.GeoDataFrame( df , crs='EPSG:32647', 
                            geometry=gpd.points_from_xy( df.E, df.N ) )
    gdf.drop( ['E','N' ], axis='columns', inplace=True )
    return gdf

def ResamplRoute( dfROUTE, dfCURVE ,INT=10):
    dfSampl = dfROUTE.copy()
    for ic in range( len(dfCURVE) ):
        df_curv = ResamplCurve( dfCURVE.iloc[ic] ,INT )
        df_curv[['Name','AliType','PntType','Dist']] =\
                    [ f'Curve#{ic}', 'Curve', 'SAMPL', np.NaN ]
        pi = dfSampl[(dfSampl['Name']==f'Curve#{ic}')&(dfSampl['PntType']=='PI' )]
        assert( len(pi)==1 )
        PRECEED = dfSampl.loc[0 :pi.index[0]]
        SUCCEED = dfSampl.loc[pi.index[0]+1:]
        dfSampl = pd.concat( [PRECEED,df_curv,SUCCEED], ignore_index=True, sort=False ) 
    PPP = dfSampl[(dfSampl['AliType']=='Curve')&(dfSampl['PntType'].\
                                                 isin(['PC','PI','PT']) )]
    dfSampl.drop( PPP.index, inplace=True)
    #import pdb; pdb.set_trace()
    return dfSampl
###############################################################################
###############################################################################
###############################################################################
FILE_ALIGN = './Data/Design Alignment Track_2021-11-05_Final.xml'
FILE_SAMPL = './Data/DraftFinalAlignment_2021-07-19.kml'
dictCURVE, dfProfil = ReadLandXML( FILE_ALIGN )
dfRoutPnt, dfRoutLS = RestrucRoute( dictCURVE )
dfRoutPnt, dfRoutLS = CalcLinRefRoute( dfRoutPnt, dfRoutLS) # weld LS and LR
dfRoutSampl = ResamplRoute( dfRoutPnt, dictCURVE['Curve'], INT=2 )  # on curve only!!!
import pdb; pdb.set_trace()
#pd.set_option('display.max_rows', None )
#print( dfRoutPnt )

##############################################
if 1:
    dfCL = gpd.read_file(FILE_SAMPL, driver='KML' )
    dfCL = dfCL.to_crs('EPSG:32647')
    CL_LS = dfCL.iloc[0].geometry 
    def CalcDistProfil( row ):
        pnt = CL_LS.interpolate( row.Dist_m, normalized=False )
        return pd.Series([ pnt.x, pnt.y ])
    dfProfil[['x','y']] = dfProfil.apply( CalcDistProfil, axis='columns'  )
    dfProfil = gpd.GeoDataFrame( dfProfil, crs='EPSG:32647', 
                                 geometry=gpd.points_from_xy( dfProfil.x, dfProfil.y) )
##############################################
OUT_GIS = 'df_Route_Align.gpkg' 
isPI = dfRoutPnt.PntType=='PI'
if 1:
    dfRoutPnt[ isPI].to_file( OUT_GIS,driver="GPKG", layer='CurveDataPI')
    dfRoutPnt[~isPI].to_file( OUT_GIS, driver="GPKG", layer='CurvePoint')
    dfRoutLS.to_file( OUT_GIS, driver="GPKG", layer='Line_Curve')
    dfProfil.to_file( OUT_GIS, driver="GPKG", layer='Profile')
    dfCL.to_file( OUT_GIS, driver="GPKG", layer='CenterLine')
    dfRoutSampl.to_file( OUT_GIS, driver="GPKG", layer='RouteSampling')
##############################################
if 0:
    for i in (0,-1):
        dist_m,msl = np.fromstring( Profi['PVI'][i], sep=" ")
        import pdb; pdb.set_trace()
        dfProfil = dfProfil.append( ( Profi['PVI'][i], '', dist_m, msl  ) )
